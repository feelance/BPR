@page "/MyShoppingCart"
@using ShoeInc.Data.ShoppingCart
@using ShoeInc.Data
@using System.Security.Claims
@inject AppState appState

@using ShoeInc.Areas.Identity
@using ShoeInc.Repositories.Orders
@using ShoeInc.Services.OrderService

@inject Microsoft.AspNetCore.Identity.SignInManager<ShoeInc.Areas.Identity.Data.ShoeIncUser> _signInManager
@inject Microsoft.AspNetCore.Identity.UserManager<ShoeInc.Areas.Identity.Data.ShoeIncUser> _userManager
@inject ShoeInc.Data.ShoppingCart.Cart cart;
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject NavigationManager NavManager;

@inject ShoeInc.Services.ShoppingCartService _shoppingCartService



@if (CartItems != null && CartItems.Any())
{
    
    <div class="panel panel-info">
        <div class="panel-heading">
            <h3 class="panel-title">Order Summary</h3>
        </div>
        <div class="panel-body">
            <div id="update-message">
            </div>
            <table class="table table-striped table-hover ">
                <thead>
                    <tr>
                        <th>
                            Item Name
                        </th>
                        <th>
                            Price (each)
                        </th>
                        <th>
                            Quantity
                        </th>
                        <th>
                            Total Price
                        </th>
                        <th></th>
                    </tr>
                </thead>
                @foreach (var item in CartItems)
                {
                    <tr>
                        <td>
                            @item.Model
                        </td>
                        <td>
                            @item.Price.ToString("N2") $
                        </td>
                        <td>
                            @item.Quantity 
                        </td>
                       
                        <td>
                                <button class="btn btn-primary" id="button"  @onclick="(()=> removeFromCart(item.Id))">Remove From Cart</button>
                        </td>
                        <div class="media-img-wrapper mr-2">
                                        <a href="@item.ModelCode">
                                            <img class="media-img" src="@item.ImageUrl" alt="@item.Model"/>
                                        </a>
                                    </div>
                    </tr>
                }
                <tr class="info">
                    <td></td>
                    <td></td>
                    <td></td>
                    <td id="cart-total">
                        Total : @CartTotal.ToString("N2") $    <button class="btn btn-primary" id="button"  @onclick="(()=> createOrder())">Confirm Order</button>
                    </td>
                </tr>
            </table>
        </div>
    </div>
}
else
{
    <div class="custom-bg">        
        <p>There are no items in your cart currently. Please shop for something and add items..</p>        
    </div>
}

@code
{
    
    
    public ICollection<Product> CartItems { get; set; }
    
    public decimal CartTotal => CartItems.Sum(c => c.Price * c.Quantity);

    protected override async Task OnInitializedAsync()
    {
        var principal = await _authenticationStateProvider.GetAuthenticationStateAsync();

        
        
        if (_signInManager.IsSignedIn(principal.User))
        {
            Console.WriteLine("Is signed in");
            CartItems =  _shoppingCartService.getProducts();
        }
        else
        {
            CartItems =  _shoppingCartService.getProducts();
            Console.WriteLine("Got shopping cart");
        }
         

    }

    protected async Task removeFromCart(int id)
    {
        _shoppingCartService.RemoveFromCart(id);
        Product product = new Product();
        product.Id = id;

        foreach (var c in CartItems)
        {
            bool done = false;
            if (c.Id == id && !done)
            {
                CartItems.Remove(c);
                done = true;
            }
            if (done)
                break;


        }

    // appState.setCartCount(CartItems.Count);
    // StateHasChanged();
    }
    private void createOrder()
    {
        _shoppingCartService.CreateOrder(CartItems);
        NavManager.NavigateTo("/orderconfirmation");

    }
   
   
}